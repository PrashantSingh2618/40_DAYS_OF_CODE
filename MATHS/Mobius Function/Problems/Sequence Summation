Question Link : https://www.codechef.com/problems/GEEK05

Logic : function is  F(n)=∑d|n f(d) where f(d) is A[d] and F(n) is 2^n .

   it can be written as f(d)=∑d|n μ(d)F(n/d) 
    
    where μ(n)= 1 when n=1
              = 0 when p^2%n == 0 where p is prime ie. on numbers where prime divisor is p
              = -1 for distinct primes
         Therefore
         A[d]=∑d|n μ(d) 2^(n/d )
         
         
 Implemented Code :
 

#include <bits/stdc++.h>
using namespace std;

typedef long long int ll;
ll i;
#define mod 1000000007
#define pb push_back
#define endl cout<<"\n";
#define prt1(a) cout<<a<<" "
#define prt2(a,b) cout<<a<<" "<<b<<" "
#define prt3(a,b,c) cout<<a<<" "<<b<<" "<<c<<" "
#define rep(i,st,end) for( i=st;i<end;i++)
#define repv(i,st,end) for( i=st;i>=end;i--)
#define fio ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)

ll arr[100005];         // store power of 2 
ll prefixsum[100005];
ll ans[100005];
ll mobius[100005];
ll prime[100005]={0};          // 0 rep prime
void precompute()
{
    ll i,j;
    fill(mobius,mobius+100005,1);     
    for(i=2;i<100005;i++)
    {
     if(!prime[i])
     {
        for(j=i;j<100005;j+=i)
        {
            if(j!=i)
                prime[j]=1;
            if(j %(i*i)==0)
                mobius[j]=0;
            else 
                mobius[j]=mobius[j]*(-1);

        }
     }
    }
    arr[0]=1;
    for(i=1;i<100005;i++)
    arr[i]=(arr[i-1]*2)%mod;
    
    for(i=1;i<100005;i++)       // rep d
    {
        for(j=i;j<100005;j+=i)       // rep n
        {
            ans[j]+=(mobius[i]*arr[j/i])%mod;
            ans[j]=ans[j]%mod;
        }
    }
    
    
    
    prefixsum[0]=0;
    
    for(i=1;i<100005;i++)
        prefixsum[i]=(prefixsum[i-1]+ans[i])%mod;
    


    
}

int main() {
  ios_base::sync_with_stdio(0);
    cin.tie(0);
    precompute();  
    ll t,l,r;
    cin>>t;
    while(t--)
    {
        cin>>l>>r;
        prt1((prefixsum[r]-prefixsum[l-1]+2*mod)%mod);
        endl;
    }
    
    
    
    return 0;
}
